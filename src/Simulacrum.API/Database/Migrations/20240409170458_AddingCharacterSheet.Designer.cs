// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Simulacrum.API.Database;

#nullable disable

namespace Simulacrum.API.Database.Migrations
{
    [DbContext(typeof(SimulacrumDbContext))]
    [Migration("20240409170458_AddingCharacterSheet")]
    partial class AddingCharacterSheet
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Simulacrum.API.Database.Models.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterId"));

                    b.Property<string>("Alignment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ArmorClass")
                        .HasColumnType("int");

                    b.Property<string>("AttacksAndSpellcasting")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Background")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bonds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CharacterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Charisma")
                        .HasColumnType("int");

                    b.Property<int?>("Constitution")
                        .HasColumnType("int");

                    b.Property<int?>("CopperPieces")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentHitPoints")
                        .HasColumnType("int");

                    b.Property<int?>("Dexterity")
                        .HasColumnType("int");

                    b.Property<int?>("ElectrumPieces")
                        .HasColumnType("int");

                    b.Property<string>("Equipment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExperiencePoints")
                        .HasColumnType("int");

                    b.Property<string>("FeaturesAndTraits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flaws")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GoldPieces")
                        .HasColumnType("int");

                    b.Property<string>("HitDice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HitDiceTotal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HitPointMaximum")
                        .HasColumnType("int");

                    b.Property<string>("Ideals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Initiative")
                        .HasColumnType("int");

                    b.Property<int?>("Intelligence")
                        .HasColumnType("int");

                    b.Property<bool>("JackOfAllTrades")
                        .HasColumnType("bit");

                    b.Property<string>("OtherProficienciesAndLanguages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalityTraits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlatinumPieces")
                        .HasColumnType("int");

                    b.Property<string>("PlayerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProficiencyBonus")
                        .HasColumnType("int");

                    b.Property<string>("Race")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SilverPieces")
                        .HasColumnType("int");

                    b.Property<int?>("Speed")
                        .HasColumnType("int");

                    b.Property<int?>("Strength")
                        .HasColumnType("int");

                    b.Property<int?>("TemporaryHitPoints")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("Wisdom")
                        .HasColumnType("int");

                    b.HasKey("CharacterId");

                    b.HasIndex("UserId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Simulacrum.API.Database.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Simulacrum.API.Database.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Simulacrum.API.Database.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Simulacrum.API.Database.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Simulacrum.API.Database.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Simulacrum.API.Database.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simulacrum.API.Database.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Simulacrum.API.Database.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Simulacrum.API.Database.Models.Character", b =>
                {
                    b.HasOne("Simulacrum.API.Database.Models.User", "User")
                        .WithMany("Characters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Simulacrum.API.Database.Models.Skill", "Acrobatics", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<bool>("HasExpertise")
                                .HasColumnType("bit");

                            b1.Property<bool>("HasProficiency")
                                .HasColumnType("bit");

                            b1.Property<int?>("Score")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("Acrobatics");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Simulacrum.API.Database.Models.Skill", "AnimalHandling", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<bool>("HasExpertise")
                                .HasColumnType("bit");

                            b1.Property<bool>("HasProficiency")
                                .HasColumnType("bit");

                            b1.Property<int?>("Score")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("AnimalHandling");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Simulacrum.API.Database.Models.Skill", "Arcana", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<bool>("HasExpertise")
                                .HasColumnType("bit");

                            b1.Property<bool>("HasProficiency")
                                .HasColumnType("bit");

                            b1.Property<int?>("Score")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("Arcana");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Simulacrum.API.Database.Models.Skill", "Athletics", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<bool>("HasExpertise")
                                .HasColumnType("bit");

                            b1.Property<bool>("HasProficiency")
                                .HasColumnType("bit");

                            b1.Property<int?>("Score")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("Athletics");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Simulacrum.API.Database.Models.Skill", "CharismaSavingThrow", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<bool>("HasExpertise")
                                .HasColumnType("bit");

                            b1.Property<bool>("HasProficiency")
                                .HasColumnType("bit");

                            b1.Property<int?>("Score")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("CharismaSavingThrow");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Simulacrum.API.Database.Models.Skill", "ConstitutionSavingThrow", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<bool>("HasExpertise")
                                .HasColumnType("bit");

                            b1.Property<bool>("HasProficiency")
                                .HasColumnType("bit");

                            b1.Property<int?>("Score")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("ConstitutionSavingThrow");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Simulacrum.API.Database.Models.Skill", "Deception", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<bool>("HasExpertise")
                                .HasColumnType("bit");

                            b1.Property<bool>("HasProficiency")
                                .HasColumnType("bit");

                            b1.Property<int?>("Score")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("Deception");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Simulacrum.API.Database.Models.Skill", "DexteritySavingThrow", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<bool>("HasExpertise")
                                .HasColumnType("bit");

                            b1.Property<bool>("HasProficiency")
                                .HasColumnType("bit");

                            b1.Property<int?>("Score")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("DexteritySavingThrow");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Simulacrum.API.Database.Models.Skill", "History", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<bool>("HasExpertise")
                                .HasColumnType("bit");

                            b1.Property<bool>("HasProficiency")
                                .HasColumnType("bit");

                            b1.Property<int?>("Score")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("History");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Simulacrum.API.Database.Models.Skill", "Insight", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<bool>("HasExpertise")
                                .HasColumnType("bit");

                            b1.Property<bool>("HasProficiency")
                                .HasColumnType("bit");

                            b1.Property<int?>("Score")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("Insight");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Simulacrum.API.Database.Models.Skill", "IntelligenceSavingThrow", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<bool>("HasExpertise")
                                .HasColumnType("bit");

                            b1.Property<bool>("HasProficiency")
                                .HasColumnType("bit");

                            b1.Property<int?>("Score")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("IntelligenceSavingThrow");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Simulacrum.API.Database.Models.Skill", "Intimidation", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<bool>("HasExpertise")
                                .HasColumnType("bit");

                            b1.Property<bool>("HasProficiency")
                                .HasColumnType("bit");

                            b1.Property<int?>("Score")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("Intimidation");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Simulacrum.API.Database.Models.Skill", "Investigation", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<bool>("HasExpertise")
                                .HasColumnType("bit");

                            b1.Property<bool>("HasProficiency")
                                .HasColumnType("bit");

                            b1.Property<int?>("Score")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("Investigation");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Simulacrum.API.Database.Models.Skill", "Medicine", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<bool>("HasExpertise")
                                .HasColumnType("bit");

                            b1.Property<bool>("HasProficiency")
                                .HasColumnType("bit");

                            b1.Property<int?>("Score")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("Medicine");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Simulacrum.API.Database.Models.Skill", "Nature", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<bool>("HasExpertise")
                                .HasColumnType("bit");

                            b1.Property<bool>("HasProficiency")
                                .HasColumnType("bit");

                            b1.Property<int?>("Score")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("Nature");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Simulacrum.API.Database.Models.Skill", "Perception", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<bool>("HasExpertise")
                                .HasColumnType("bit");

                            b1.Property<bool>("HasProficiency")
                                .HasColumnType("bit");

                            b1.Property<int?>("Score")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("Perception");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Simulacrum.API.Database.Models.Skill", "Performance", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<bool>("HasExpertise")
                                .HasColumnType("bit");

                            b1.Property<bool>("HasProficiency")
                                .HasColumnType("bit");

                            b1.Property<int?>("Score")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("Performance");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Simulacrum.API.Database.Models.Skill", "Persuasion", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<bool>("HasExpertise")
                                .HasColumnType("bit");

                            b1.Property<bool>("HasProficiency")
                                .HasColumnType("bit");

                            b1.Property<int?>("Score")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("Persuasion");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Simulacrum.API.Database.Models.Skill", "Religion", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<bool>("HasExpertise")
                                .HasColumnType("bit");

                            b1.Property<bool>("HasProficiency")
                                .HasColumnType("bit");

                            b1.Property<int?>("Score")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("Religion");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Simulacrum.API.Database.Models.Skill", "SleightOfHand", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<bool>("HasExpertise")
                                .HasColumnType("bit");

                            b1.Property<bool>("HasProficiency")
                                .HasColumnType("bit");

                            b1.Property<int?>("Score")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("SleightOfHand");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Simulacrum.API.Database.Models.Skill", "Stealth", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<bool>("HasExpertise")
                                .HasColumnType("bit");

                            b1.Property<bool>("HasProficiency")
                                .HasColumnType("bit");

                            b1.Property<int?>("Score")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("Stealth");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Simulacrum.API.Database.Models.Skill", "StrengthSavingThrow", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<bool>("HasExpertise")
                                .HasColumnType("bit");

                            b1.Property<bool>("HasProficiency")
                                .HasColumnType("bit");

                            b1.Property<int?>("Score")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("StrengthSavingThrow");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Simulacrum.API.Database.Models.Skill", "Survival", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<bool>("HasExpertise")
                                .HasColumnType("bit");

                            b1.Property<bool>("HasProficiency")
                                .HasColumnType("bit");

                            b1.Property<int?>("Score")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("Survival");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Simulacrum.API.Database.Models.Skill", "WisdomSavingThrow", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<bool>("HasExpertise")
                                .HasColumnType("bit");

                            b1.Property<bool>("HasProficiency")
                                .HasColumnType("bit");

                            b1.Property<int?>("Score")
                                .HasColumnType("int");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("WisdomSavingThrow");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsMany("Simulacrum.API.Database.Models.Class", "Classes", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<int?>("Level")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CharacterId", "Id");

                            b1.ToTable("Characters");

                            b1.ToJson("Classes");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Simulacrum.API.Database.Models.DeathSaves", "DeathSaves", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("int");

                            b1.Property<bool>("Failure1")
                                .HasColumnType("bit");

                            b1.Property<bool>("Failure2")
                                .HasColumnType("bit");

                            b1.Property<bool>("Failure3")
                                .HasColumnType("bit");

                            b1.Property<bool>("Success1")
                                .HasColumnType("bit");

                            b1.Property<bool>("Success2")
                                .HasColumnType("bit");

                            b1.Property<bool>("Success3")
                                .HasColumnType("bit");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.ToJson("DeathSaves");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.Navigation("Acrobatics")
                        .IsRequired();

                    b.Navigation("AnimalHandling")
                        .IsRequired();

                    b.Navigation("Arcana")
                        .IsRequired();

                    b.Navigation("Athletics")
                        .IsRequired();

                    b.Navigation("CharismaSavingThrow")
                        .IsRequired();

                    b.Navigation("Classes");

                    b.Navigation("ConstitutionSavingThrow")
                        .IsRequired();

                    b.Navigation("DeathSaves")
                        .IsRequired();

                    b.Navigation("Deception")
                        .IsRequired();

                    b.Navigation("DexteritySavingThrow")
                        .IsRequired();

                    b.Navigation("History")
                        .IsRequired();

                    b.Navigation("Insight")
                        .IsRequired();

                    b.Navigation("IntelligenceSavingThrow")
                        .IsRequired();

                    b.Navigation("Intimidation")
                        .IsRequired();

                    b.Navigation("Investigation")
                        .IsRequired();

                    b.Navigation("Medicine")
                        .IsRequired();

                    b.Navigation("Nature")
                        .IsRequired();

                    b.Navigation("Perception")
                        .IsRequired();

                    b.Navigation("Performance")
                        .IsRequired();

                    b.Navigation("Persuasion")
                        .IsRequired();

                    b.Navigation("Religion")
                        .IsRequired();

                    b.Navigation("SleightOfHand")
                        .IsRequired();

                    b.Navigation("Stealth")
                        .IsRequired();

                    b.Navigation("StrengthSavingThrow")
                        .IsRequired();

                    b.Navigation("Survival")
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WisdomSavingThrow")
                        .IsRequired();
                });

            modelBuilder.Entity("Simulacrum.API.Database.Models.User", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
